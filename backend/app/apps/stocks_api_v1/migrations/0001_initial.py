# Generated by Django 5.0.2 on 2024-03-03 13:35

import django.contrib.postgres.fields.ranges
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticker', models.CharField(help_text='The ticker of the stock.', max_length=10, verbose_name='ticker')),
                ('shortname', models.CharField(help_text='The short name of the instrument.', max_length=50, verbose_name='short name')),
                ('secname', models.CharField(help_text='The name of the financial instrument.', max_length=50, verbose_name='secname')),
                ('latname', models.CharField(help_text='The name of the financial instrument in English.', max_length=50, null=True, verbose_name='latname')),
                ('prevprice', models.DecimalField(decimal_places=7, default=0, help_text='The price of the last trade of the previous day.', max_digits=10, verbose_name='prevprice')),
                ('lotsize', models.PositiveSmallIntegerField(help_text='The number of securities in one standard lot.', verbose_name='lotsize')),
                ('facevalue', models.DecimalField(decimal_places=15, help_text='The nominal value of one security at the current date.', max_digits=20, verbose_name='facevalue')),
                ('faceunit', models.CharField(help_text='The code of the currency in which the nominal value of the security is expressed.', max_length=10, verbose_name='faceunit')),
                ('status', models.CharField(choices=[('A', 'Operations are allowed'), ('S', 'Operations are prohibited'), ('N', 'Blocked for trading, execution of transactions is allowed')], default='A', help_text='The indicator "trading operations are allowed/prohibited".', max_length=1, verbose_name='status')),
                ('decimals', models.PositiveSmallIntegerField(default=0, help_text='The number of decimal places of the fractional part of the number. It is used to format the values of fields with the DECIMAL type.', verbose_name='decimals')),
                ('minstep', models.DecimalField(decimal_places=7, help_text='The minimum possible difference between the prices indicated in the bids for the purchase/sale of securities', max_digits=10, verbose_name='min step')),
                ('prevdate', models.DateField(help_text='The date of the previous trading day.', null=True, verbose_name='prevdate')),
                ('issuesize', models.PositiveBigIntegerField(help_text='The number of securities in the issue.', verbose_name='issuesize')),
                ('isin', models.CharField(help_text='The international identification code of the security.', max_length=20, verbose_name='isin')),
                ('regnumber', models.CharField(help_text='The number of the state registration.', max_length=50, null=True, verbose_name='regnumber')),
                ('prevlegalcloseprice', models.DecimalField(decimal_places=7, default=0, help_text='The official closing price of the previous day, calculated in accordance with the trading rules as the weighted average price of transactions for the last 10 minutes of the main session, including transactions of the post-trading period or the closing auction.', max_digits=10, verbose_name='prev legal close price')),
                ('currencyid', models.CharField(help_text='The currency of settlement for the instrument.', max_length=10, verbose_name='currency ID')),
                ('sectype', models.CharField(choices=[('1', 'The security is ordinary'), ('2', 'The security is privileged'), ('3', 'Government bonds'), ('4', 'Regional bonds'), ('5', 'Central bank bonds'), ('6', 'Corporate bonds'), ('7', 'MFO bonds'), ('8', 'Exchange-traded bonds'), ('9', 'Shares of open MIF'), ('A', 'Shares of interval MIF'), ('B', 'Shares of closed MIF'), ('C', 'Municipal bonds'), ('D', 'Depository receipts'), ('E', 'Securities of exchange investment funds (ETFs)'), ('F', 'Mortgage certificate'), ('G', 'A basket of securities'), ('H', 'Additional list ID'), ('I', 'ETC (commodity instruments)'), ('U', 'Clearing certificates of participation'), ('Q', 'Currency'), ('J', 'A share of stock exchange MIF')], default='1', help_text='The type of security.', max_length=1, verbose_name='sectype')),
                ('listlevel', models.PositiveSmallIntegerField(choices=[(1, 'First'), (2, 'Second'), (3, 'Third')], default=1, help_text='The listing level.', verbose_name='listlevel')),
                ('settledate', models.DateField(help_text='Settlement date of the transaction.', verbose_name='settledate')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
            ],
            options={
                'verbose_name': 'stock',
                'verbose_name_plural': 'stocks',
                'ordering': ('ticker',),
            },
        ),
        migrations.CreateModel(
            name='Candle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open', models.DecimalField(decimal_places=7, help_text='The opening price.', max_digits=10, verbose_name='open')),
                ('close', models.DecimalField(decimal_places=7, help_text='The closing price.', max_digits=10, verbose_name='close')),
                ('high', models.DecimalField(decimal_places=7, help_text='The highest price.', max_digits=10, verbose_name='high')),
                ('low', models.DecimalField(decimal_places=7, help_text='The lowest price.', max_digits=10, verbose_name='low')),
                ('value', models.DecimalField(decimal_places=7, help_text='The total value of trades during the candle period.', max_digits=20, verbose_name='value')),
                ('volume', models.DecimalField(decimal_places=7, help_text='The total volume of trades during the candle period.', max_digits=20, verbose_name='volume')),
                ('time_range', django.contrib.postgres.fields.ranges.DateTimeRangeField(help_text='The time range during which the candlestick represents the trading activity.', verbose_name='time range')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candles', to='stocks_api_v1.stock', verbose_name='stock ID')),
            ],
            options={
                'verbose_name': 'candle',
                'verbose_name_plural': 'candles',
            },
        ),
    ]
